{"version":3,"sources":["reportWebVitals.js","components/text-field/text-field.js","components/Header/header.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TextField","name","reference","htmlFor","type","ref","id","size","header","App","useState","totalCalories","setTotalCalories","fatCalories","setFatCalories","carbCalories","setCarbCalories","proteinCalories","setProteinCalories","useForm","register","handleSubmit","onSubmit","macros","a","console","log","fat","carbs","protein","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,4CCLC,SAASQ,EAAT,GAAyC,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,UACtC,OACI,gCACI,wBAAOC,QAASF,EAAhB,UAAuBA,EAAvB,YACA,uBAAOG,KAAK,SAASH,KAAMA,EAAMI,IAAKH,EAAWI,GAAIL,EAAMM,KAAK,SCJ7D,SAASC,IACpB,OACI,iCACI,sDC2DGC,MAvDf,WAAe,MAG+BC,mBAAS,GAHxC,mBAGJC,EAHI,KAGWC,EAHX,OAI2BF,mBAAS,GAJpC,mBAIJG,EAJI,KAISC,EAJT,OAK6BJ,mBAAS,GALtC,mBAKJK,EALI,KAKUC,EALV,OAMmCN,mBAAS,GAN5C,mBAMJO,EANI,KAMaC,EANb,OASwBC,cAA3BC,EATG,EASHA,SAAUC,EATP,EASOA,aACZC,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,6DACbC,QAAQC,IAAIH,GADC,SAEPT,EAA6B,GAAbS,EAAOI,KAFhB,uBAGPX,EAAgC,GAAfO,EAAOK,OAHjB,uBAIPV,EAAqC,GAAjBK,EAAOM,SAJpB,OAKbjB,EAAiBC,EAAcE,EAAeE,GALjC,2CAAH,sDAQd,OACI,qCACI,cAAC,EAAD,IACA,oCACI,kDACA,uBACIK,SAAUD,EAAaC,GAD3B,UAGI,cAACtB,EAAD,CACIC,KAAK,MACLC,UAAWkB,IAEf,cAACpB,EAAD,CACIC,KAAK,QACLC,UAAWkB,IAEf,cAACpB,EAAD,CACIC,KAAK,UACLC,UAAWkB,IAEf,wBAAQhB,KAAK,SAAb,6BAIR,oCACI,kDAAqBO,KACrB,+BACI,kDACA,uCAAUE,KACV,yCAAYE,KACZ,2CAAcE,e,MC7ClCa,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5B3C,M","file":"static/js/main.73567c56.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\n\r\nexport default function TextField({ name, reference }) {\r\n    return (\r\n        <div>\r\n            <label htmlFor={name}>{name} (g): </label>\r\n            <input type=\"number\" name={name} ref={reference} id={name} size=\"5\"/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function header() {\r\n    return (\r\n        <header>\r\n            <h1>Calorie Calculator</h1>\r\n        </header>\r\n    )\r\n}\r\n","// NPM IMPORTS\nimport { useState } from \"react\";\nimport { useForm } from 'react-hook-form';\n\n// COMPONENTS\nimport TextField from './components/text-field/text-field';\nimport Header from './components/Header/header.js';\n\n\nfunction App() {\n\n    // STATE\n    const [totalCalories, setTotalCalories] = useState(0);\n    const [fatCalories, setFatCalories] = useState(0);\n    const [carbCalories, setCarbCalories] = useState(0);\n    const [proteinCalories, setProteinCalories] = useState(0);\n\n    // FORM LOGIC\n    const { register, handleSubmit } = useForm();\n    const onSubmit = async (macros) => {\n        console.log(macros);\n        await setFatCalories(+macros.fat * 9);\n        await setCarbCalories(+macros.carbs * 4);\n        await setProteinCalories(+macros.protein * 4);\n        setTotalCalories(fatCalories + carbCalories + proteinCalories);\n    }\n\n    return (\n        <>\n            <Header />\n            <section>\n                <h2>Enter # of Grams</h2>\n                <form\n                    onSubmit={handleSubmit(onSubmit)}\n                >\n                    <TextField\n                        name=\"fat\"\n                        reference={register}\n                    />\n                    <TextField\n                        name=\"carbs\"\n                        reference={register}\n                    />\n                    <TextField\n                        name=\"protein\"\n                        reference={register}\n                    />\n                    <button type=\"submit\"\n                    >Calculate</button>\n                </form>\n            </section>\n            <section>\n                <h2>Total Calories: {totalCalories}</h2>\n                <ul>\n                    <h3>Calories from...</h3>\n                    <li>Fat: {fatCalories}</li>\n                    <li>Carbs: {carbCalories}</li>\n                    <li>Protein: {proteinCalories}</li>\n                </ul>\n            </section>\n        </>\n    );\n}\n\nexport default App;\n","// IMPORTS\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\n// COMPONENTS\nimport App from './App';\n\n// CSS\nimport './index.css';\n\n// RENDER\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}